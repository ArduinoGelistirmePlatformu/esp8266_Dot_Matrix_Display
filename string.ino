void stringToDisplay ( String s , int x, int y, int t) {
  for ( int i = 0; i < s.length(); i++ ) {
    char2Arr(stringtoshort(s.substring(i, i + 1)), x -= 6, y);
    delayMicroseconds(t);
  } refresh_display();
}
unsigned short stringtoshort ( String s ) {
  //Serial.print("stringtoshor= ");Serial.println(s);
  if ( s == " " ) return 32;
  else if ( s == "!" ) return 33;
  else if ( s == "'" ) return 34;
  else if ( s == "#" ) return 35;
  else if ( s == "$" ) return 36;
  else if ( s == "%" ) return 37;
  else if ( s == "&" ) return 38;
  else if ( s == "'" ) return 39;
  else if ( s == "." ) return 46;
  else if ( s == "/" ) return 47;
  else if ( s == ":" ) return 58;
  else if ( s == "=" ) return 61;
  else if ( s == "_" ) return 95;
  else if ( s == "+" ) return 43;
  else if ( s == "-" ) return 45;
  else if ( s == "~" ) return 126;
  else if ( s ==  "" ) return 127;
  else if ( s == ")" ) return 41;
  else if ( s == "(" ) return 40;
  else if ( s == "{" ) return 123;
  else if ( s == "}" ) return 125;
  else if ( s == "|" ) return 124;

  else if ( s == "0" ) return 48;
  else if ( s == "1" ) return 49;
  else if ( s == "2" ) return 50;
  else if ( s == "3" ) return 51;
  else if ( s == "4" ) return 52;
  else if ( s == "5" ) return 53;
  else if ( s == "6" ) return 54;
  else if ( s == "7" ) return 55;
  else if ( s == "8" ) return 56;
  else if ( s == "9" ) return 57;

  else if ( s == "A" ) return 65;
  else if ( s == "B" ) return 66;
  else if ( s == "C" || s == "Ç" ) return 67;
  else if ( s == "D" ) return 68;
  else if ( s == "E" ) return 69;
  else if ( s == "F" ) return 70;
  else if ( s == "G" ) return 71;
  else if ( s == "H" ) return 72;
  else if ( s == "I" || s == "İ" ) return 73;
  else if ( s == "J" ) return 74;
  else if ( s == "K" ) return 75;
  else if ( s == "L" ) return 76;
  else if ( s == "M" ) return 77;
  else if ( s == "N" ) return 78;
  else if ( s == "O" || s == "Ö" ) return 79;
  else if ( s == "P" ) return 80;
  else if ( s == "Q" ) return 81;
  else if ( s == "R" ) return 82;
  else if ( s == "S" ) return 83;
  else if ( s == "T" ) return 84;
  else if ( s == "U" || s == "Ü" ) return 85;
  else if ( s == "V" ) return 86;
  else if ( s == "W" ) return 87;
  else if ( s == "X" ) return 88;
  else if ( s == "Y" ) return 89;
  else if ( s == "Z" ) return 90;

  else if ( s == "a" ) return 97;
  else if ( s == "b" ) return 98;
  else if ( s == "c" || s == "ç" ) return 99;
  else if ( s == "d" ) return 100;
  else if ( s == "e" ) return 101;
  else if ( s == "f" ) return 102;
  else if ( s == "g" ) return 103;
  else if ( s == "h" ) return 104;
  else if ( s == "i" || s == "ı" ) return 105;
  else if ( s == "j" ) return 106;
  else if ( s == "k" ) return 107;
  else if ( s == "l" ) return 108;
  else if ( s == "m" ) return 109;
  else if ( s == "n" ) return 110;
  else if ( s == "o" || s == "ö" ) return 111;
  else if ( s == "p" ) return 112;
  else if ( s == "q" ) return 113;
  else if ( s == "r" ) return 114;
  else if ( s == "s" ) return 115;
  else if ( s == "t" ) return 116;
  else if ( s == "u" || s == "ü" ) return 117;
  else if ( s == "v" ) return 118;
  else if ( s == "w" ) return 119;
  else if ( s == "x" ) return 120;
  else if ( s == "y" ) return 121;
  else if ( s == "z" ) return 122;
}
unsigned short const font1[96][9] = {
  { 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // 0x20, Space
  { 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00 },   // 0x21, !
  { 0x07, 0x10, 0x28, 0x10, 0x03, 0x04, 0x04, 0x03, 0x00 },   // 0x22, ' Derece İşareti
  { 0x07, 0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a, 0x00 },   // 0x23, #
  { 0x07, 0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04, 0x00 },   // 0x24, $
  { 0x07, 0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13, 0x00 },   // 0x25, %
  { 0x07, 0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d, 0x00 },   // 0x26, &
  { 0x07, 0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 },   // 0x27, '
  { 0x07, 0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02, 0x00 },   // 0x28, (
  { 0x07, 0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08, 0x00 },   // 0x29, )
  { 0x07, 0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04, 0x00 },   // 0x2a, *
  { 0x07, 0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00, 0x00 },   // 0x2b, +
  { 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02 },   // 0x2c, ,
  { 0x07, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00 },   // 0x2d, -
  { 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00 },   // 0x2e, .
  { 0x07, 0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00 },   // 0x2f, /
  { 0x07, 0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e, 0x00 },   // 0x30, 0
  { 0x07, 0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x00 },   // 0x31, 1
  { 0x07, 0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f, 0x00 },   // 0x32, 2
  { 0x07, 0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e, 0x00 },   // 0x33, 3
  { 0x07, 0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02, 0x00 },   // 0x34, 4
  { 0x07, 0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e, 0x00 },   // 0x35, 5
  { 0x07, 0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e, 0x00 },   // 0x36, 6
  { 0x07, 0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08, 0x00 },   // 0x37, 7
  { 0x07, 0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e, 0x00 },   // 0x38, 8
  { 0x07, 0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c, 0x00 },   // 0x39, 9
  { 0x04, 0x00, 0x03, 0x03, 0x00, 0x03, 0x03, 0x00, 0x00 },   // 0x3a, :
  { 0x07, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08, 0x00 },   // 0x3b, ;
  { 0x07, 0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02, 0x00 },   // 0x3c, <
  { 0x07, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00, 0x00 },   // 0x3d, =
  { 0x07, 0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08, 0x00 },   // 0x3e, >
  { 0x07, 0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04, 0x00 },   // 0x3f, ?
  { 0x07, 0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f, 0x00 },   // 0x40, @
  { 0x07, 0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x00 },   // 0x41, A
  { 0x07, 0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e, 0x00 },   // 0x42, B
  { 0x07, 0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e, 0x00 },   // 0x43, C
  { 0x07, 0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e, 0x00 },   // 0x44, D
  { 0x07, 0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f, 0x00 },   // 0x45, E
  { 0x07, 0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10, 0x00 },   // 0x46, F
  { 0x07, 0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f, 0x00 },   // 0x37, G
  { 0x07, 0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11, 0x00 },   // 0x48, H
  { 0x07, 0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e, 0x00 },   // 0x49, I
  { 0x07, 0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c, 0x00 },   // 0x4a, J
  { 0x07, 0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11, 0x00 },   // 0x4b, K
  { 0x07, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f, 0x00 },   // 0x4c, L
  { 0x07, 0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11, 0x00 },   // 0x4d, M
  { 0x07, 0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11, 0x00 },   // 0x4e, N
  { 0x07, 0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00 },   // 0x4f, O
  { 0x07, 0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10, 0x00 },   // 0x50, P
  { 0x07, 0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d, 0x00 },   // 0x51, Q
  { 0x07, 0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11, 0x00 },   // 0x52, R
  { 0x07, 0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e, 0x00 },   // 0x53, S
  { 0x07, 0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00 },   // 0x54, T
  { 0x07, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00 },   // 0x55, U
  { 0x07, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x00 },   // 0x56, V
  { 0x07, 0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11, 0x00 },   // 0x57, W
  { 0x07, 0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11, 0x00 },   // 0x58, X
  { 0x07, 0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04, 0x00 },   // 0x59, Y
  { 0x07, 0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f, 0x00 },   // 0x5a, Z
  { 0x07, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e, 0x00 },   // 0x5b, [
  { 0x07, 0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01, 0x00 },   // 0x5c, '\'
  { 0x07, 0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e, 0x00 },   // 0x5d, ]
  { 0x07, 0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00 },   // 0x5e, ^
  { 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00 },   // 0x5f, _
  { 0x07, 0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 },   // 0x60, `
  { 0x07, 0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d, 0x00 },   // 0x61, a
  { 0x07, 0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c, 0x00 },   // 0x62, b
  { 0x07, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e, 0x00 },   // 0x63, c
  { 0x07, 0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07, 0x00 },   // 0x64, d
  { 0x07, 0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f, 0x00 },   // 0x65, e
  { 0x07, 0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08, 0x00 },   // 0x66, f
  { 0x07, 0x00, 0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e },   // 0x67, g
  { 0x07, 0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11, 0x00 },   // 0x68, h
  { 0x05, 0x00, 0x02, 0x00, 0x06, 0x02, 0x02, 0x07, 0x00 },   // 0x69, i
  { 0x07, 0x00, 0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c },   // 0x6a, j
  { 0x07, 0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12, 0x00 },   // 0x6b, k
  { 0x05, 0x06, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00 },   // 0x6c, l
  { 0x07, 0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11, 0x00 },   // 0x6d, m
  { 0x07, 0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11, 0x00 },   // 0x6e, n
  { 0x07, 0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e, 0x00 },   // 0x6f, o
  { 0x07, 0x00, 0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10 },   // 0x70, p
  { 0x07, 0x00, 0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01 },   // 0x71, q
  { 0x07, 0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10, 0x00 },   // 0x72, r
  { 0x07, 0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e, 0x00 },   // 0x73, s
  { 0x07, 0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06, 0x00 },   // 0x74, t
  { 0x07, 0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d, 0x00 },   // 0x75, u
  { 0x07, 0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04, 0x00 },   // 0x76, v
  { 0x07, 0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a, 0x00 },   // 0x77, w
  { 0x07, 0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x00 },   // 0x78, x
  { 0x07, 0x00, 0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e },   // 0x79, y
  { 0x07, 0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f, 0x00 },   // 0x7a, z
  { 0x07, 0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06, 0x00 },   // 0x7b, {
  { 0x07, 0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04, 0x00 },   // 0x7c, |
  { 0x07, 0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c, 0x00 },   // 0x7d, }
  { 0x07, 0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 },   // 0x7e, ~
  { 0x07, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x00 }    // 0x7f, DEL
};
//*************************************************************************************************
const unsigned short Init[7][2] = { { 0x0C, 0x00 },    // display off
  { 0x00, 0xFF },
  { 0x09, 0x00 },
  { 0x0F, 0x00 },
  { 0x0B, 0x07 },
  { 0x0A, 0x04 },
  { 0x0C, 0x01 }
};
//**************************************************************************************************
void max7219_init() {
  unsigned short i, j;
  for (i = 0; i < 7; i++) {
    digitalWrite(CS, LOW);
    delayMicroseconds(1);
    for (j = 0; j < MAXS; j++) {
      SPI.write(Init[i][0]);
      SPI.write(Init[i][1]);
    }
    digitalWrite(CS, HIGH);
  }
}
//**************************************************************************************************
void max7219_set_br(unsigned short br)
{
  unsigned short j;
  if (br < 16) {
    digitalWrite(CS, LOW);
    delayMicroseconds(1);
    for (j = 0; j < MAXS; j++) {
      SPI.write(0x0A);
      SPI.write(br);
    }
    digitalWrite(CS, HIGH);
  }
}
//**************************************************************************************************
void led_init(void) {
  unsigned short i, j, k;
  j = 0;
  k = 0;
  for (i = 0; i < MAXS * 8; i++) {
    HMAX[i] = (1 << j);   //bitmask
    LMAX[i] = k;
    j++;
    if (j > 7) {
      j = 0;
      k++;
    }
  }
}
//**************************************************************************************************
void clear_Display() {
  unsigned short i, j;
  for (i = 0; i < 8; i++)
  {
    digitalWrite(CS, LOW);
    delayMicroseconds(1);
    for (j = MAXS; j > 0; j--) {
      LED[j - 1][i] = 0;
      SPI.write(i + 1);
      SPI.write(LED[j - 1][i]);
    }
    digitalWrite(CS, HIGH);
  }
}
//**************************************************************************************************
void refresh_display()
{
  unsigned short i, j;

  for (i = 0; i < 8; i++)
  {
    digitalWrite(CS, LOW);
    delayMicroseconds(1);
    for (j = MAXS; j > 0; j--) {
      SPI.write(i + 1);
      SPI.write(LED[j - 1][i]);
    }
    digitalWrite(CS, HIGH);
  }
}
//**************************************************************************************************
void char2Arr(unsigned short ch, int PosX, short PosY) {
  int i, j, k, l, m, o1, o2, o3, o4;
  PosX++;
  k = ch - 32;
  if ((k >= 0) && (k < 96)) {
    o4 = font1[k][0];
    o3 = 1 << (o4 - 2);
    for (i = 0; i < o4; i++) {
      if (((PosX - i <= maxX) && (PosX - i >= 0))
          && ((PosY > -8) && (PosY < 8))) {
        o1 = HMAX[PosX - i];
        o2 = LMAX[PosX - i];
        for (j = 0; j < 8; j++) {
          if (((PosY >= 0) && (PosY <= j)) || ((PosY < 0) && (j < PosY + 8))) {
            l = font1[k][j + 1];
            m = (l & (o3 >> i));
            if (m > 0)
              LED[o2][j - PosY] = LED[o2][j - PosY] | (o1);
            else
              LED[o2][j - PosY] = LED[o2][j - PosY] & (~o1);
          }
        }
      }
    }
  }
}
